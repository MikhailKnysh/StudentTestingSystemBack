// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STS.DAL.DBContext;

namespace STS.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220119190853_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("STS.DAL.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdQuestion")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id_Question");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdQuestion" }, "IX_Answers_Id_Question");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("STS.DAL.Entities.AvailableTest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsAvailable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(1)))");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ThemeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StudentId" }, "IX_AvailableTests_StudentId");

                    b.HasIndex(new[] { "ThemeId" }, "IX_AvailableTests_ThemeId");

                    b.ToTable("AvailableTests");
                });

            modelBuilder.Entity("STS.DAL.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("STS.DAL.Entities.GroupEntityUserEntity", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupsId", "UsersId");

                    b.HasIndex(new[] { "UsersId" }, "IX_GroupEntityUserEntity_UsersId");

                    b.ToTable("GroupEntityUserEntity");
                });

            modelBuilder.Entity("STS.DAL.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("LinkForHelp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathToImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ThemeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ThemeId" }, "IX_Questions_ThemeId");

                    b.HasIndex(new[] { "UserId" }, "IX_Questions_UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("STS.DAL.Entities.StudentAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("AnswerDuration")
                        .HasColumnType("bigint");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("StudentAnswers");
                });

            modelBuilder.Entity("STS.DAL.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("STS.DAL.Entities.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountOfHelpChecks")
                        .HasColumnType("int");

                    b.Property<long>("DateTimeFinish")
                        .HasColumnType("bigint");

                    b.Property<long>("DateTimeStart")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ThemeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TimePreparation")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StudentId" }, "IX_Tests_StudentId");

                    b.HasIndex(new[] { "ThemeId" }, "IX_Tests_ThemeId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("STS.DAL.Entities.Theme", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountQuestions")
                        .HasColumnType("int");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SubjectId" }, "IX_Themes_SubjectId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("STS.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("STS.DAL.Entities.Answer", b =>
                {
                    b.HasOne("STS.DAL.Entities.Question", "IdQuestionNavigation")
                        .WithMany("Answers")
                        .HasForeignKey("IdQuestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdQuestionNavigation");
                });

            modelBuilder.Entity("STS.DAL.Entities.AvailableTest", b =>
                {
                    b.HasOne("STS.DAL.Entities.User", "Student")
                        .WithMany("AvailableTests")
                        .HasForeignKey("StudentId")
                        .IsRequired();

                    b.HasOne("STS.DAL.Entities.Theme", "Theme")
                        .WithMany("AvailableTests")
                        .HasForeignKey("ThemeId")
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("STS.DAL.Entities.GroupEntityUserEntity", b =>
                {
                    b.HasOne("STS.DAL.Entities.Group", "Groups")
                        .WithMany("GroupEntityUserEntities")
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STS.DAL.Entities.User", "Users")
                        .WithMany("GroupEntityUserEntities")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Groups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("STS.DAL.Entities.Question", b =>
                {
                    b.HasOne("STS.DAL.Entities.Theme", "Theme")
                        .WithMany("Questions")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STS.DAL.Entities.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theme");

                    b.Navigation("User");
                });

            modelBuilder.Entity("STS.DAL.Entities.StudentAnswer", b =>
                {
                    b.HasOne("STS.DAL.Entities.Answer", "Answer")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STS.DAL.Entities.Question", "Question")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Answer");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("STS.DAL.Entities.Test", b =>
                {
                    b.HasOne("STS.DAL.Entities.User", "Student")
                        .WithMany("Tests")
                        .HasForeignKey("StudentId");

                    b.HasOne("STS.DAL.Entities.Theme", "Theme")
                        .WithMany("Tests")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("STS.DAL.Entities.Theme", b =>
                {
                    b.HasOne("STS.DAL.Entities.Subject", "Subject")
                        .WithMany("Themes")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("STS.DAL.Entities.Answer", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("STS.DAL.Entities.Group", b =>
                {
                    b.Navigation("GroupEntityUserEntities");
                });

            modelBuilder.Entity("STS.DAL.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("STS.DAL.Entities.Subject", b =>
                {
                    b.Navigation("Themes");
                });

            modelBuilder.Entity("STS.DAL.Entities.Theme", b =>
                {
                    b.Navigation("AvailableTests");

                    b.Navigation("Questions");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("STS.DAL.Entities.User", b =>
                {
                    b.Navigation("AvailableTests");

                    b.Navigation("GroupEntityUserEntities");

                    b.Navigation("Questions");

                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
